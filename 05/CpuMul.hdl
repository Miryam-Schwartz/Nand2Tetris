// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

//**Edited by Miryam**

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
	
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=inToA);
	
	And(a=instruction[5], b=instruction[15], out=temp);
	
	Not(in=instruction[15], out=Acommand);
	
	Or(a=Acommand, b=temp, out=loadToA);
	
	ARegister(in=inToA, load=loadToA, out=Aout, out[0..14]=addressM);
	
	Mux16(a=Aout, b=inM, sel=instruction[12], out=y);
	
	And(a=instruction[4], b=instruction[15], out=loadToD);
	
	DRegister(in=ALUout, load=loadToD, out=x);
	
	ExtendAlu(x=x, y=y, instruction=instruction[6..14], out=outM, out=ALUout, zr=zr, ng=ng);
	
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	LoadToPC(Ccommand=instruction[15], j1=instruction[2], j2=instruction[1], j3=instruction[0], zr=zr, ng=ng, out=loadToPC);
	
	Or(a=loadToPC, b=reset, out=loadOrReset);
	
	Not(in=loadOrReset, out=inc);
	
	PC(in=Aout, load=loadToPC, inc=inc, reset=reset, out[0..14]=pc);
}
